{"version":3,"sources":["js/task-1.js","js/task-2.js","js/task-3.js","index.js"],"names":["delay","ms","Promise","resolved","logger","time","console","log","then","users","name","active","toggleUserState","allUsers","userName","resolve","reject","Error","map","user","data","table","randomIntegerFromInterval","min","max","Math","floor","random","makeTransaction","transaction","setTimeout","id","logSuccess","logError","warn","amount","catch"],"mappings":";;;AAIA,IAAMA,EAAQ,SAACC,GACJ,OAAA,IAAIC,QAAQ,SAAAC,GACfA,EAASF,MAKXG,EAAS,SAAAC,GAAQC,OAAAA,QAAQC,IAAsBF,kBAAAA,OAAAA,EAAlC,QAGnBL,EAAM,KAAMQ,KAAKJ,GACjBJ,EAAM,KAAMQ,KAAKJ,GACjBJ,EAAM,MAAMQ,KAAKJ;;ACmBjB,SAAA,EAAA,EAAA,GAAA,IAAA,EAAA,OAAA,KAAA,GAAA,GAAA,OAAA,sBAAA,CAAA,IAAA,EAAA,OAAA,sBAAA,GAAA,IAAA,EAAA,EAAA,OAAA,SAAA,GAAA,OAAA,OAAA,yBAAA,EAAA,GAAA,cAAA,EAAA,KAAA,MAAA,EAAA,GAAA,OAAA,EAAA,SAAA,EAAA,GAAA,IAAA,IAAA,EAAA,EAAA,EAAA,UAAA,OAAA,IAAA,CAAA,IAAA,EAAA,MAAA,UAAA,GAAA,UAAA,GAAA,GAAA,EAAA,EAAA,EAAA,OAAA,IAAA,GAAA,QAAA,SAAA,GAAA,EAAA,EAAA,EAAA,EAAA,MAAA,OAAA,0BAAA,OAAA,iBAAA,EAAA,OAAA,0BAAA,IAAA,EAAA,OAAA,IAAA,QAAA,SAAA,GAAA,OAAA,eAAA,EAAA,EAAA,OAAA,yBAAA,EAAA,MAAA,OAAA,EAAA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,KAAA,EAAA,OAAA,eAAA,EAAA,EAAA,CAAA,MAAA,EAAA,YAAA,EAAA,cAAA,EAAA,UAAA,IAAA,EAAA,GAAA,EAAA,EAnCA,IAAMK,EAAQ,CACZ,CAAEC,KAAM,QAASC,QAAQ,GACzB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,MAAOC,QAAQ,IAGnBC,EAAkB,SAACC,EAAUC,GACxB,OAAA,IAAIZ,QAAQ,SAAAa,GACVF,GAAUG,OAAOC,MAAD,wBAInBF,EAHmBF,EAASK,IAAI,SAAAC,GAC9BA,OAAAA,EAAKT,OAASI,EAAgBK,EAAAA,EAAAA,GAAAA,GAA9B,GAAA,CAAoCR,QAASQ,EAAKR,SAAWQ,QAYnEf,EAAS,SAAAgB,GAAQd,OAAAA,QAAQe,MAAMD,IAWrCR,EAAgBH,EAAO,SAASD,KAAKJ,GACrCQ,EAAgBH,EAAO,OAAOD,KAAKJ;;ACnCnC,IAAMkB,EAA4B,SAACC,EAAKC,GAC/BC,OAAAA,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,EAAM,GAAKA,IAGhDK,EAAkB,SAACC,GACd,OAAA,IAAI3B,QAAQ,SAACa,EAASC,GACvBhB,IAAAA,EAAQsB,EAA0B,IAAK,KAE/CQ,WAAW,WACUL,KAAKE,SAAW,GAG/BZ,EAAQ,CAAEgB,GAAIF,EAAYE,GAAI1B,KAAKL,IAErCgB,EAAOa,EAAYE,KAEpB/B,MAKCgC,EAAa,SAAkB,GAAfD,IAAAA,EAAAA,EAAAA,GAAI1B,EAAAA,EAAAA,KACxBC,QAAQC,IAAmBwB,eAAAA,OAAAA,EAAmB1B,kBAAAA,OAAAA,EAA9C,QAGI4B,EAAW,SAAAF,GACfzB,QAAQ4B,KAAqCH,gCAAAA,OAAAA,EAA7C,+BAaFH,EAAgB,CAAEG,GAAI,GAAII,OAAQ,MAC/B3B,KAAKwB,GACLI,MAAMH,GAETL,EAAgB,CAAEG,GAAI,GAAII,OAAQ,MAC/B3B,KAAKwB,GACLI,MAAMH,GAETL,EAAgB,CAAEG,GAAI,GAAII,OAAQ,KAC/B3B,KAAKwB,GACLI,MAAMH,GAETL,EAAgB,CAAEG,GAAI,GAAII,OAAQ,MAC/B3B,KAAKwB,GACLI,MAAMH;;AClDT,aAHA,QAAA,oBACA,QAAA,eACA,QAAA,eACA,QAAA","file":"src.d2d90d45.js","sourceRoot":"..\\src","sourcesContent":["/* const delay = new Promise((resolve, reject) => {\r\n    resolve(delay);\r\n});\r\n */\r\nconst delay = (ms) => {\r\n    return new Promise(resolved => {\r\n        resolved(ms)\r\n\r\n    });\r\n  // Твой код\r\n};\r\nconst logger = time => console.log(`Resolved after ${time}ms`);\r\n\r\n// Вызовы функции для проверки\r\ndelay(2000).then(logger); // Resolved after 2000ms\r\ndelay(1000).then(logger); // Resolved after 1000ms\r\ndelay(1500).then(logger); // Resolved after 1500ms","const users = [\r\n  { name: 'Mango', active: true },\r\n  { name: 'Poly', active: false },\r\n  { name: 'Ajax', active: true },\r\n  { name: 'Lux', active: false },\r\n];\r\n\r\nconst toggleUserState = (allUsers, userName) => {\r\n    return new Promise(resolve => {\r\n         if(!allUsers) reject(Error(`Userlist is invalid`));\r\n        const updatedUsers = allUsers.map(user =>\r\n            user.name === userName ? { ...user, active: !user.active } : user,\r\n          );\r\n          resolve(updatedUsers);\r\n\r\n    })\r\n  /* const updatedUsers = allUsers.map(user =>\r\n    user.name === userName ? { ...user, active: !user.active } : user,\r\n  ); */\r\n\r\n  \r\n};\r\n\r\nconst logger = data => console.table(data);\r\n\r\n/*\r\n * Сейчас работает так\r\n */\r\n/* toggleUserState(users, 'Mango', logger);\r\ntoggleUserState(users, 'Lux', logger);\r\n */\r\n/*\r\n * Должно работать так\r\n */\r\ntoggleUserState(users, 'Mango').then(logger);\r\ntoggleUserState(users, 'Lux').then(logger);","const randomIntegerFromInterval = (min, max) => {\r\n  return Math.floor(Math.random() * (max - min + 1) + min);\r\n};\r\n\r\nconst makeTransaction = (transaction) => {\r\n    return new Promise((resolve, reject) => {\r\n    const delay = randomIntegerFromInterval(200, 500);\r\n\r\n  setTimeout(() => {\r\n    const canProcess = Math.random() > 0.3;\r\n\r\n    if (canProcess) {\r\n        resolve({ id: transaction.id, time:delay });\r\n    } else {\r\n      reject(transaction.id);\r\n    }\r\n  }, delay);\r\n\r\n})  \r\n};\r\n\r\nconst logSuccess = ({ id, time }) => {\r\n  console.log(`Transaction ${id} processed in ${time}ms`);\r\n};\r\n\r\nconst logError = id => {\r\n  console.warn(`Error processing transaction ${id}. Please try again later.`);\r\n};\r\n\r\n/*\r\n * Работает так\r\n */\r\n/* makeTransaction({ id: 70, amount: 150 }, logSuccess, logError);\r\nmakeTransaction({ id: 71, amount: 230 }, logSuccess, logError);\r\nmakeTransaction({ id: 72, amount: 75 }, logSuccess, logError);\r\nmakeTransaction({ id: 73, amount: 100 }, logSuccess, logError); */\r\n/*\r\n * Должно работать так\r\n */\r\nmakeTransaction({ id: 70, amount: 150 })\r\n  .then(logSuccess)\r\n  .catch(logError);\r\n\r\nmakeTransaction({ id: 71, amount: 230 })\r\n  .then(logSuccess)\r\n  .catch(logError);\r\n\r\nmakeTransaction({ id: 72, amount: 75 })\r\n  .then(logSuccess)\r\n  .catch(logError);\r\n\r\nmakeTransaction({ id: 73, amount: 100 })\r\n  .then(logSuccess)\r\n  .catch(logError);","import \"./css/styles.css\";\nimport \"./js/task-1\";\nimport \"./js/task-2\";\nimport \"./js/task-3\";\n\n\n\n"]}